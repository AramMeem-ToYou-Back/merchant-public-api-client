/*
 * ToYou's public API:  Orders
 * Allows to get notified about new orders, order status changes and retrieve order details.<br/> As soon as a driver has been assigned to the order, it becomes available to retrieve by 3rd party. It means that driver is already on the way to pickup the order. The status of the order will change during the delivery. ToYou provides the information on each status change of the delivery
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.am.rest.client.orders.model;

import java.util.Objects;
import java.util.Arrays;
import com.am.rest.client.orders.model.OrderDataDriver;
import com.am.rest.client.orders.model.OrderDataOrderTotal;
import com.am.rest.client.orders.model.OrderDataPickupLocation;
import com.am.rest.client.orders.model.OrderLineWithProduct;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * OrderData
 */


public class OrderData {
  @JsonProperty("orderId")
  private UUID orderId = null;

  @JsonProperty("orderNumber")
  private String orderNumber = null;

  @JsonProperty("lang")
  private String lang = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("orderTotal")
  private OrderDataOrderTotal orderTotal = null;

  @JsonProperty("estimatedPickupDate")
  private OffsetDateTime estimatedPickupDate = null;

  @JsonProperty("creationDate")
  private OffsetDateTime creationDate = null;

  @JsonProperty("paymentType")
  private String paymentType = null;

  @JsonProperty("deliveryStatus")
  private String deliveryStatus = null;

  @JsonProperty("pickupLocation")
  private OrderDataPickupLocation pickupLocation = null;

  @JsonProperty("merchantPosID")
  private UUID merchantPosID = null;

  @JsonProperty("orderLines")
  private List<OrderLineWithProduct> orderLines = null;

  @JsonProperty("driver")
  private OrderDataDriver driver = null;

  public OrderData orderId(UUID orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * Unique order ID in ToYou system
   * @return orderId
  **/
  @Schema(required = true, description = "Unique order ID in ToYou system")
  public UUID getOrderId() {
    return orderId;
  }

  public void setOrderId(UUID orderId) {
    this.orderId = orderId;
  }

  public OrderData orderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * Unique human readable order number
   * @return orderNumber
  **/
  @Schema(example = "450456", required = true, description = "Unique human readable order number")
  public String getOrderNumber() {
    return orderNumber;
  }

  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }

  public OrderData lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * “en” or “ar”. The language in which the order has been created
   * @return lang
  **/
  @Schema(example = "en", required = true, description = "“en” or “ar”. The language in which the order has been created")
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }

  public OrderData currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * order total currency. Always in SAR
   * @return currency
  **/
  @Schema(example = "SAR", required = true, description = "order total currency. Always in SAR")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public OrderData orderTotal(OrderDataOrderTotal orderTotal) {
    this.orderTotal = orderTotal;
    return this;
  }

   /**
   * Get orderTotal
   * @return orderTotal
  **/
  @Schema(required = true, description = "")
  public OrderDataOrderTotal getOrderTotal() {
    return orderTotal;
  }

  public void setOrderTotal(OrderDataOrderTotal orderTotal) {
    this.orderTotal = orderTotal;
  }

  public OrderData estimatedPickupDate(OffsetDateTime estimatedPickupDate) {
    this.estimatedPickupDate = estimatedPickupDate;
    return this;
  }

   /**
   * Estimated Date and time when driver will arrive at pick up location
   * @return estimatedPickupDate
  **/
  @Schema(example = "2021-06-30T08:23:49.692Z", required = true, description = "Estimated Date and time when driver will arrive at pick up location")
  public OffsetDateTime getEstimatedPickupDate() {
    return estimatedPickupDate;
  }

  public void setEstimatedPickupDate(OffsetDateTime estimatedPickupDate) {
    this.estimatedPickupDate = estimatedPickupDate;
  }

  public OrderData creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Date and time of order creation in ToYou system
   * @return creationDate
  **/
  @Schema(example = "2021-06-30T08:23:49.692Z", required = true, description = "Date and time of order creation in ToYou system")
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public OrderData paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Credit: payments in Cash&lt;br&gt;Card: payments by Credit Card
   * @return paymentType
  **/
  @Schema(example = "Credit", required = true, description = "Credit: payments in Cash<br>Card: payments by Credit Card")
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public OrderData deliveryStatus(String deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
    return this;
  }

   /**
   * Order&#x27;s current delivery status
   * @return deliveryStatus
  **/
  @Schema(example = "AT PICK UP", required = true, description = "Order's current delivery status")
  public String getDeliveryStatus() {
    return deliveryStatus;
  }

  public void setDeliveryStatus(String deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
  }

  public OrderData pickupLocation(OrderDataPickupLocation pickupLocation) {
    this.pickupLocation = pickupLocation;
    return this;
  }

   /**
   * Get pickupLocation
   * @return pickupLocation
  **/
  @Schema(description = "")
  public OrderDataPickupLocation getPickupLocation() {
    return pickupLocation;
  }

  public void setPickupLocation(OrderDataPickupLocation pickupLocation) {
    this.pickupLocation = pickupLocation;
  }

  public OrderData merchantPosID(UUID merchantPosID) {
    this.merchantPosID = merchantPosID;
    return this;
  }

   /**
   * Merchant&#x27;s Point of Sale ID in ToYou system
   * @return merchantPosID
  **/
  @Schema(required = true, description = "Merchant's Point of Sale ID in ToYou system")
  public UUID getMerchantPosID() {
    return merchantPosID;
  }

  public void setMerchantPosID(UUID merchantPosID) {
    this.merchantPosID = merchantPosID;
  }

  public OrderData orderLines(List<OrderLineWithProduct> orderLines) {
    this.orderLines = orderLines;
    return this;
  }

  public OrderData addOrderLinesItem(OrderLineWithProduct orderLinesItem) {
    if (this.orderLines == null) {
      this.orderLines = new ArrayList<>();
    }
    this.orderLines.add(orderLinesItem);
    return this;
  }

   /**
   * Get orderLines
   * @return orderLines
  **/
  @Schema(description = "")
  public List<OrderLineWithProduct> getOrderLines() {
    return orderLines;
  }

  public void setOrderLines(List<OrderLineWithProduct> orderLines) {
    this.orderLines = orderLines;
  }

  public OrderData driver(OrderDataDriver driver) {
    this.driver = driver;
    return this;
  }

   /**
   * Get driver
   * @return driver
  **/
  @Schema(description = "")
  public OrderDataDriver getDriver() {
    return driver;
  }

  public void setDriver(OrderDataDriver driver) {
    this.driver = driver;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderData orderData = (OrderData) o;
    return Objects.equals(this.orderId, orderData.orderId) &&
        Objects.equals(this.orderNumber, orderData.orderNumber) &&
        Objects.equals(this.lang, orderData.lang) &&
        Objects.equals(this.currency, orderData.currency) &&
        Objects.equals(this.orderTotal, orderData.orderTotal) &&
        Objects.equals(this.estimatedPickupDate, orderData.estimatedPickupDate) &&
        Objects.equals(this.creationDate, orderData.creationDate) &&
        Objects.equals(this.paymentType, orderData.paymentType) &&
        Objects.equals(this.deliveryStatus, orderData.deliveryStatus) &&
        Objects.equals(this.pickupLocation, orderData.pickupLocation) &&
        Objects.equals(this.merchantPosID, orderData.merchantPosID) &&
        Objects.equals(this.orderLines, orderData.orderLines) &&
        Objects.equals(this.driver, orderData.driver);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, orderNumber, lang, currency, orderTotal, estimatedPickupDate, creationDate, paymentType, deliveryStatus, pickupLocation, merchantPosID, orderLines, driver);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderData {\n");
    
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    orderTotal: ").append(toIndentedString(orderTotal)).append("\n");
    sb.append("    estimatedPickupDate: ").append(toIndentedString(estimatedPickupDate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    deliveryStatus: ").append(toIndentedString(deliveryStatus)).append("\n");
    sb.append("    pickupLocation: ").append(toIndentedString(pickupLocation)).append("\n");
    sb.append("    merchantPosID: ").append(toIndentedString(merchantPosID)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    driver: ").append(toIndentedString(driver)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
