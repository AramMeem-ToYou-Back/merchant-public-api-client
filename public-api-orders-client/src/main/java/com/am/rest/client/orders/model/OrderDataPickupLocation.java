/*
 * ToYou's public API:  Orders
 * Allows to get notified about new orders, order status changes and retrieve order details.<br/> As soon as a driver has been assigned to the order, it becomes available to retrieve by 3rd party. It means that driver is already on the way to pickup the order. The status of the order will change during the delivery. ToYou provides the information on each status change of the delivery
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.am.rest.client.orders.model;

import java.util.Objects;
import java.util.Arrays;
import com.am.rest.client.orders.model.OrderDataPickupLocationGeopoint;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Location to pick up the order by driver
 */
@Schema(description = "Location to pick up the order by driver")

public class OrderDataPickupLocation {
  @JsonProperty("formattedAddress")
  private String formattedAddress = null;

  @JsonProperty("addressLine1")
  private String addressLine1 = null;

  @JsonProperty("addressLine2")
  private String addressLine2 = null;

  @JsonProperty("area")
  private String area = null;

  @JsonProperty("city")
  private String city = null;

  @JsonProperty("state")
  private String state = null;

  @JsonProperty("country")
  private String country = null;

  @JsonProperty("zip")
  private String zip = null;

  @JsonProperty("geopoint")
  private OrderDataPickupLocationGeopoint geopoint = null;

  public OrderDataPickupLocation formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

   /**
   * Get formattedAddress
   * @return formattedAddress
  **/
  @Schema(description = "")
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }

  public OrderDataPickupLocation addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

   /**
   * Get addressLine1
   * @return addressLine1
  **/
  @Schema(description = "")
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }

  public OrderDataPickupLocation addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

   /**
   * Get addressLine2
   * @return addressLine2
  **/
  @Schema(description = "")
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }

  public OrderDataPickupLocation area(String area) {
    this.area = area;
    return this;
  }

   /**
   * Get area
   * @return area
  **/
  @Schema(description = "")
  public String getArea() {
    return area;
  }

  public void setArea(String area) {
    this.area = area;
  }

  public OrderDataPickupLocation city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @Schema(description = "")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public OrderDataPickupLocation state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(description = "")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public OrderDataPickupLocation country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @Schema(description = "")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public OrderDataPickupLocation zip(String zip) {
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @Schema(description = "")
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }

  public OrderDataPickupLocation geopoint(OrderDataPickupLocationGeopoint geopoint) {
    this.geopoint = geopoint;
    return this;
  }

   /**
   * Get geopoint
   * @return geopoint
  **/
  @Schema(description = "")
  public OrderDataPickupLocationGeopoint getGeopoint() {
    return geopoint;
  }

  public void setGeopoint(OrderDataPickupLocationGeopoint geopoint) {
    this.geopoint = geopoint;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDataPickupLocation orderDataPickupLocation = (OrderDataPickupLocation) o;
    return Objects.equals(this.formattedAddress, orderDataPickupLocation.formattedAddress) &&
        Objects.equals(this.addressLine1, orderDataPickupLocation.addressLine1) &&
        Objects.equals(this.addressLine2, orderDataPickupLocation.addressLine2) &&
        Objects.equals(this.area, orderDataPickupLocation.area) &&
        Objects.equals(this.city, orderDataPickupLocation.city) &&
        Objects.equals(this.state, orderDataPickupLocation.state) &&
        Objects.equals(this.country, orderDataPickupLocation.country) &&
        Objects.equals(this.zip, orderDataPickupLocation.zip) &&
        Objects.equals(this.geopoint, orderDataPickupLocation.geopoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formattedAddress, addressLine1, addressLine2, area, city, state, country, zip, geopoint);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDataPickupLocation {\n");
    
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    geopoint: ").append(toIndentedString(geopoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
